// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Elmah.Io.Client.Models
{
    public partial class MessageOverview
    {
        internal static MessageOverview DeserializeMessageOverview(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> application = default;
            Optional<string> detail = default;
            Optional<string> hostname = default;
            Optional<string> title = default;
            Optional<string> titleTemplate = default;
            Optional<string> source = default;
            Optional<int> statusCode = default;
            Optional<DateTimeOffset> dateTime = default;
            Optional<string> type = default;
            Optional<string> user = default;
            Optional<string> severity = default;
            Optional<string> url = default;
            Optional<string> method = default;
            Optional<string> version = default;
            Optional<string> correlationId = default;
            Optional<IReadOnlyList<Item>> cookies = default;
            Optional<IReadOnlyList<Item>> form = default;
            Optional<IReadOnlyList<Item>> queryString = default;
            Optional<IReadOnlyList<Item>> serverVariables = default;
            Optional<IReadOnlyList<Item>> data = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("application"))
                {
                    application = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("detail"))
                {
                    detail = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hostname"))
                {
                    hostname = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("title"))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("titleTemplate"))
                {
                    titleTemplate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("source"))
                {
                    source = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("statusCode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    statusCode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("dateTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("user"))
                {
                    user = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("severity"))
                {
                    severity = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("url"))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("method"))
                {
                    method = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("version"))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("correlationId"))
                {
                    correlationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cookies"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Item> array = new List<Item>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Item.DeserializeItem(item));
                    }
                    cookies = array;
                    continue;
                }
                if (property.NameEquals("form"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Item> array = new List<Item>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Item.DeserializeItem(item));
                    }
                    form = array;
                    continue;
                }
                if (property.NameEquals("queryString"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Item> array = new List<Item>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Item.DeserializeItem(item));
                    }
                    queryString = array;
                    continue;
                }
                if (property.NameEquals("serverVariables"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Item> array = new List<Item>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Item.DeserializeItem(item));
                    }
                    serverVariables = array;
                    continue;
                }
                if (property.NameEquals("data"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Item> array = new List<Item>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Item.DeserializeItem(item));
                    }
                    data = array;
                    continue;
                }
            }
            return new MessageOverview(id.Value, application.Value, detail.Value, hostname.Value, title.Value, titleTemplate.Value, source.Value, Optional.ToNullable(statusCode), Optional.ToNullable(dateTime), type.Value, user.Value, severity.Value, url.Value, method.Value, version.Value, correlationId.Value, Optional.ToList(cookies), Optional.ToList(form), Optional.ToList(queryString), Optional.ToList(serverVariables), Optional.ToList(data));
        }
    }
}
