// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Elmah.Io.Client.Models;

namespace Elmah.Io.Client
{
    /// <summary> The Messages service client. </summary>
    public partial class MessagesClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal MessagesRestClient RestClient { get; }

        /// <summary> Initializes a new instance of MessagesClient for mocking. </summary>
        protected MessagesClient()
        {
        }

        /// <summary> Initializes a new instance of MessagesClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal MessagesClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new MessagesRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Fetch messages from a log. </summary>
        /// <param name="logId"> The ID of the log containing the messages. </param>
        /// <param name="pageIndex"> The page number of the result. </param>
        /// <param name="pageSize"> The number of messages to load (max 100) or 15 if not set. </param>
        /// <param name="query"> A full-text or Lucene query to limit the messages by. </param>
        /// <param name="from"> A start date and time to search from (not included). </param>
        /// <param name="to"> An end date and time to search to (not included). </param>
        /// <param name="includeHeaders"> Include headers like server variables and cookies in the result (slower). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<MessagesResult>> GetAllAsync(string logId, int? pageIndex = null, int? pageSize = null, string query = null, DateTimeOffset? @from = null, DateTimeOffset? to = null, bool? includeHeaders = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MessagesClient.GetAll");
            scope.Start();
            try
            {
                return await RestClient.GetAllAsync(logId, pageIndex, pageSize, query, @from, to, includeHeaders, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Fetch messages from a log. </summary>
        /// <param name="logId"> The ID of the log containing the messages. </param>
        /// <param name="pageIndex"> The page number of the result. </param>
        /// <param name="pageSize"> The number of messages to load (max 100) or 15 if not set. </param>
        /// <param name="query"> A full-text or Lucene query to limit the messages by. </param>
        /// <param name="from"> A start date and time to search from (not included). </param>
        /// <param name="to"> An end date and time to search to (not included). </param>
        /// <param name="includeHeaders"> Include headers like server variables and cookies in the result (slower). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<MessagesResult> GetAll(string logId, int? pageIndex = null, int? pageSize = null, string query = null, DateTimeOffset? @from = null, DateTimeOffset? to = null, bool? includeHeaders = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MessagesClient.GetAll");
            scope.Start();
            try
            {
                return RestClient.GetAll(logId, pageIndex, pageSize, query, @from, to, includeHeaders, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a list of messages by logid and query. </summary>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="body"> A search object containing query, time filters etc. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAllAsync(string logId, Search body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MessagesClient.DeleteAll");
            scope.Start();
            try
            {
                return await RestClient.DeleteAllAsync(logId, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a list of messages by logid and query. </summary>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="body"> A search object containing query, time filters etc. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteAll(string logId, Search body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MessagesClient.DeleteAll");
            scope.Start();
            try
            {
                return RestClient.DeleteAll(logId, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new message. </summary>
        /// <param name="logId"> The ID of the log which should contain the new message. </param>
        /// <param name="body"> The message object to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CreateMessageResult>> CreateAsync(string logId, CreateMessage body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MessagesClient.Create");
            scope.Start();
            try
            {
                return await RestClient.CreateAsync(logId, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new message. </summary>
        /// <param name="logId"> The ID of the log which should contain the new message. </param>
        /// <param name="body"> The message object to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CreateMessageResult> Create(string logId, CreateMessage body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MessagesClient.Create");
            scope.Start();
            try
            {
                return RestClient.Create(logId, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Fetch a message by its ID. </summary>
        /// <param name="id"> The ID of the message to fetch. </param>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Message>> GetAsync(string id, string logId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MessagesClient.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(id, logId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Fetch a message by its ID. </summary>
        /// <param name="id"> The ID of the message to fetch. </param>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Message> Get(string id, string logId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MessagesClient.Get");
            scope.Start();
            try
            {
                return RestClient.Get(id, logId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a message by its ID. </summary>
        /// <param name="id"> The ID of the message to delete. </param>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(string id, string logId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MessagesClient.Delete");
            scope.Start();
            try
            {
                return await RestClient.DeleteAsync(id, logId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a message by its ID. </summary>
        /// <param name="id"> The ID of the message to delete. </param>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(string id, string logId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MessagesClient.Delete");
            scope.Start();
            try
            {
                return RestClient.Delete(id, logId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Hide a message by its ID. </summary>
        /// <param name="id"> The ID of the message to hide. </param>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> HideAsync(string id, string logId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MessagesClient.Hide");
            scope.Start();
            try
            {
                return await RestClient.HideAsync(id, logId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Hide a message by its ID. </summary>
        /// <param name="id"> The ID of the message to hide. </param>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Hide(string id, string logId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MessagesClient.Hide");
            scope.Start();
            try
            {
                return RestClient.Hide(id, logId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Fix a message by its ID. </summary>
        /// <param name="id"> The ID of the message to fix. </param>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="markAllAsFixed"> If set to true, all instances of the log message are set to fixed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> FixAsync(string id, string logId, bool? markAllAsFixed = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MessagesClient.Fix");
            scope.Start();
            try
            {
                return await RestClient.FixAsync(id, logId, markAllAsFixed, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Fix a message by its ID. </summary>
        /// <param name="id"> The ID of the message to fix. </param>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="markAllAsFixed"> If set to true, all instances of the log message are set to fixed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Fix(string id, string logId, bool? markAllAsFixed = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MessagesClient.Fix");
            scope.Start();
            try
            {
                return RestClient.Fix(id, logId, markAllAsFixed, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create one or more new messages. </summary>
        /// <param name="logId"> The ID of the log which should contain the new messages. </param>
        /// <param name="body"> The messages to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<CreateBulkMessageResult>>> CreateBulkAsync(string logId, IEnumerable<CreateMessage> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MessagesClient.CreateBulk");
            scope.Start();
            try
            {
                return await RestClient.CreateBulkAsync(logId, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create one or more new messages. </summary>
        /// <param name="logId"> The ID of the log which should contain the new messages. </param>
        /// <param name="body"> The messages to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<CreateBulkMessageResult>> CreateBulk(string logId, IEnumerable<CreateMessage> body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MessagesClient.CreateBulk");
            scope.Start();
            try
            {
                return RestClient.CreateBulk(logId, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
