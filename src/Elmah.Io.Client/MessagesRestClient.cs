// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Elmah.Io.Client.Models;

namespace Elmah.Io.Client
{
    internal partial class MessagesRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of MessagesRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public MessagesRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            endpoint ??= new Uri("");

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetAllRequest(string logId, int? pageIndex, int? pageSize, string query, DateTimeOffset? @from, DateTimeOffset? to, bool? includeHeaders)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/v3/messages/", false);
            uri.AppendPath(logId, true);
            if (pageIndex != null)
            {
                uri.AppendQuery("pageIndex", pageIndex.Value, true);
            }
            if (pageSize != null)
            {
                uri.AppendQuery("pageSize", pageSize.Value, true);
            }
            if (query != null)
            {
                uri.AppendQuery("query", query, true);
            }
            if (@from != null)
            {
                uri.AppendQuery("from", @from.Value, "O", true);
            }
            if (to != null)
            {
                uri.AppendQuery("to", to.Value, "O", true);
            }
            if (includeHeaders != null)
            {
                uri.AppendQuery("includeHeaders", includeHeaders.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Fetch messages from a log. </summary>
        /// <param name="logId"> The ID of the log containing the messages. </param>
        /// <param name="pageIndex"> The page number of the result. </param>
        /// <param name="pageSize"> The number of messages to load (max 100) or 15 if not set. </param>
        /// <param name="query"> A full-text or Lucene query to limit the messages by. </param>
        /// <param name="from"> A start date and time to search from (not included). </param>
        /// <param name="to"> An end date and time to search to (not included). </param>
        /// <param name="includeHeaders"> Include headers like server variables and cookies in the result (slower). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="logId"/> is null. </exception>
        public async Task<Response<MessagesResult>> GetAllAsync(string logId, int? pageIndex = null, int? pageSize = null, string query = null, DateTimeOffset? @from = null, DateTimeOffset? to = null, bool? includeHeaders = null, CancellationToken cancellationToken = default)
        {
            if (logId == null)
            {
                throw new ArgumentNullException(nameof(logId));
            }

            using var message = CreateGetAllRequest(logId, pageIndex, pageSize, query, @from, to, includeHeaders);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MessagesResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = MessagesResult.DeserializeMessagesResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 401:
                case 402:
                case 429:
                    return Response.FromValue<MessagesResult>(null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Fetch messages from a log. </summary>
        /// <param name="logId"> The ID of the log containing the messages. </param>
        /// <param name="pageIndex"> The page number of the result. </param>
        /// <param name="pageSize"> The number of messages to load (max 100) or 15 if not set. </param>
        /// <param name="query"> A full-text or Lucene query to limit the messages by. </param>
        /// <param name="from"> A start date and time to search from (not included). </param>
        /// <param name="to"> An end date and time to search to (not included). </param>
        /// <param name="includeHeaders"> Include headers like server variables and cookies in the result (slower). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="logId"/> is null. </exception>
        public Response<MessagesResult> GetAll(string logId, int? pageIndex = null, int? pageSize = null, string query = null, DateTimeOffset? @from = null, DateTimeOffset? to = null, bool? includeHeaders = null, CancellationToken cancellationToken = default)
        {
            if (logId == null)
            {
                throw new ArgumentNullException(nameof(logId));
            }

            using var message = CreateGetAllRequest(logId, pageIndex, pageSize, query, @from, to, includeHeaders);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MessagesResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = MessagesResult.DeserializeMessagesResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 401:
                case 402:
                case 429:
                    return Response.FromValue<MessagesResult>(null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteAllRequest(string logId, Search body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/v3/messages/", false);
            uri.AppendPath(logId, true);
            request.Uri = uri;
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json-patch+json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Deletes a list of messages by logid and query. </summary>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="body"> A search object containing query, time filters etc. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="logId"/> is null. </exception>
        public async Task<Response> DeleteAllAsync(string logId, Search body = null, CancellationToken cancellationToken = default)
        {
            if (logId == null)
            {
                throw new ArgumentNullException(nameof(logId));
            }

            using var message = CreateDeleteAllRequest(logId, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 401:
                case 402:
                case 404:
                case 429:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes a list of messages by logid and query. </summary>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="body"> A search object containing query, time filters etc. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="logId"/> is null. </exception>
        public Response DeleteAll(string logId, Search body = null, CancellationToken cancellationToken = default)
        {
            if (logId == null)
            {
                throw new ArgumentNullException(nameof(logId));
            }

            using var message = CreateDeleteAllRequest(logId, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 401:
                case 402:
                case 404:
                case 429:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateRequest(string logId, CreateMessage body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/v3/messages/", false);
            uri.AppendPath(logId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json-patch+json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Create a new message. </summary>
        /// <param name="logId"> The ID of the log which should contain the new message. </param>
        /// <param name="body"> The message object to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="logId"/> is null. </exception>
        public async Task<Response<CreateMessageResult>> CreateAsync(string logId, CreateMessage body = null, CancellationToken cancellationToken = default)
        {
            if (logId == null)
            {
                throw new ArgumentNullException(nameof(logId));
            }

            using var message = CreateCreateRequest(logId, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 401:
                case 402:
                case 404:
                case 413:
                case 429:
                    return Response.FromValue<CreateMessageResult>(null, message.Response);
                case 201:
                    {
                        CreateMessageResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CreateMessageResult.DeserializeCreateMessageResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a new message. </summary>
        /// <param name="logId"> The ID of the log which should contain the new message. </param>
        /// <param name="body"> The message object to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="logId"/> is null. </exception>
        public Response<CreateMessageResult> Create(string logId, CreateMessage body = null, CancellationToken cancellationToken = default)
        {
            if (logId == null)
            {
                throw new ArgumentNullException(nameof(logId));
            }

            using var message = CreateCreateRequest(logId, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 401:
                case 402:
                case 404:
                case 413:
                case 429:
                    return Response.FromValue<CreateMessageResult>(null, message.Response);
                case 201:
                    {
                        CreateMessageResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CreateMessageResult.DeserializeCreateMessageResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(string id, string logId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/v3/messages/", false);
            uri.AppendPath(logId, true);
            uri.AppendPath("/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Fetch a message by its ID. </summary>
        /// <param name="id"> The ID of the message to fetch. </param>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="logId"/> is null. </exception>
        public async Task<Response<Message>> GetAsync(string id, string logId, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (logId == null)
            {
                throw new ArgumentNullException(nameof(logId));
            }

            using var message = CreateGetRequest(id, logId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Message value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Message.DeserializeMessage(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 401:
                case 402:
                case 404:
                case 429:
                    return Response.FromValue<Message>(null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Fetch a message by its ID. </summary>
        /// <param name="id"> The ID of the message to fetch. </param>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="logId"/> is null. </exception>
        public Response<Message> Get(string id, string logId, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (logId == null)
            {
                throw new ArgumentNullException(nameof(logId));
            }

            using var message = CreateGetRequest(id, logId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Message value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Message.DeserializeMessage(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 401:
                case 402:
                case 404:
                case 429:
                    return Response.FromValue<Message>(null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(string id, string logId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/v3/messages/", false);
            uri.AppendPath(logId, true);
            uri.AppendPath("/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Delete a message by its ID. </summary>
        /// <param name="id"> The ID of the message to delete. </param>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="logId"/> is null. </exception>
        public async Task<Response> DeleteAsync(string id, string logId, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (logId == null)
            {
                throw new ArgumentNullException(nameof(logId));
            }

            using var message = CreateDeleteRequest(id, logId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 401:
                case 402:
                case 404:
                case 429:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a message by its ID. </summary>
        /// <param name="id"> The ID of the message to delete. </param>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="logId"/> is null. </exception>
        public Response Delete(string id, string logId, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (logId == null)
            {
                throw new ArgumentNullException(nameof(logId));
            }

            using var message = CreateDeleteRequest(id, logId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 401:
                case 402:
                case 404:
                case 429:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateHideRequest(string id, string logId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/v3/messages/", false);
            uri.AppendPath(logId, true);
            uri.AppendPath("/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/_hide", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Hide a message by its ID. </summary>
        /// <param name="id"> The ID of the message to hide. </param>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="logId"/> is null. </exception>
        public async Task<Response> HideAsync(string id, string logId, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (logId == null)
            {
                throw new ArgumentNullException(nameof(logId));
            }

            using var message = CreateHideRequest(id, logId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 401:
                case 402:
                case 404:
                case 429:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Hide a message by its ID. </summary>
        /// <param name="id"> The ID of the message to hide. </param>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="logId"/> is null. </exception>
        public Response Hide(string id, string logId, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (logId == null)
            {
                throw new ArgumentNullException(nameof(logId));
            }

            using var message = CreateHideRequest(id, logId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 401:
                case 402:
                case 404:
                case 429:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateFixRequest(string id, string logId, bool? markAllAsFixed)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/v3/messages/", false);
            uri.AppendPath(logId, true);
            uri.AppendPath("/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/_fix", false);
            if (markAllAsFixed != null)
            {
                uri.AppendQuery("markAllAsFixed", markAllAsFixed.Value, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Fix a message by its ID. </summary>
        /// <param name="id"> The ID of the message to fix. </param>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="markAllAsFixed"> If set to true, all instances of the log message are set to fixed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="logId"/> is null. </exception>
        public async Task<Response> FixAsync(string id, string logId, bool? markAllAsFixed = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (logId == null)
            {
                throw new ArgumentNullException(nameof(logId));
            }

            using var message = CreateFixRequest(id, logId, markAllAsFixed);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 401:
                case 402:
                case 404:
                case 429:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Fix a message by its ID. </summary>
        /// <param name="id"> The ID of the message to fix. </param>
        /// <param name="logId"> The ID of the log containing the message. </param>
        /// <param name="markAllAsFixed"> If set to true, all instances of the log message are set to fixed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="logId"/> is null. </exception>
        public Response Fix(string id, string logId, bool? markAllAsFixed = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (logId == null)
            {
                throw new ArgumentNullException(nameof(logId));
            }

            using var message = CreateFixRequest(id, logId, markAllAsFixed);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 401:
                case 402:
                case 404:
                case 429:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateBulkRequest(string logId, IEnumerable<CreateMessage> body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/v3/messages/", false);
            uri.AppendPath(logId, true);
            uri.AppendPath("/_bulk", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json-patch+json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteStartArray();
                foreach (var item in body)
                {
                    content.JsonWriter.WriteObjectValue(item);
                }
                content.JsonWriter.WriteEndArray();
                request.Content = content;
            }
            return message;
        }

        /// <summary> Create one or more new messages. </summary>
        /// <param name="logId"> The ID of the log which should contain the new messages. </param>
        /// <param name="body"> The messages to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="logId"/> is null. </exception>
        public async Task<Response<IReadOnlyList<CreateBulkMessageResult>>> CreateBulkAsync(string logId, IEnumerable<CreateMessage> body = null, CancellationToken cancellationToken = default)
        {
            if (logId == null)
            {
                throw new ArgumentNullException(nameof(logId));
            }

            using var message = CreateCreateBulkRequest(logId, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<CreateBulkMessageResult> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<CreateBulkMessageResult> array = new List<CreateBulkMessageResult>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(CreateBulkMessageResult.DeserializeCreateBulkMessageResult(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 401:
                case 402:
                case 404:
                case 429:
                    return Response.FromValue<IReadOnlyList<CreateBulkMessageResult>>(null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create one or more new messages. </summary>
        /// <param name="logId"> The ID of the log which should contain the new messages. </param>
        /// <param name="body"> The messages to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="logId"/> is null. </exception>
        public Response<IReadOnlyList<CreateBulkMessageResult>> CreateBulk(string logId, IEnumerable<CreateMessage> body = null, CancellationToken cancellationToken = default)
        {
            if (logId == null)
            {
                throw new ArgumentNullException(nameof(logId));
            }

            using var message = CreateCreateBulkRequest(logId, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<CreateBulkMessageResult> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<CreateBulkMessageResult> array = new List<CreateBulkMessageResult>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(CreateBulkMessageResult.DeserializeCreateBulkMessageResult(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 401:
                case 402:
                case 404:
                case 429:
                    return Response.FromValue<IReadOnlyList<CreateBulkMessageResult>>(null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
