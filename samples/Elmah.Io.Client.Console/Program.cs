using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;

namespace Elmah.Io.Client.Console
{
    public static class Program
    {
        static void Main()
        {
            var apiKey = "API_KEY";
            var logId = new Guid("LOG_ID");

            var client = ElmahioAPI.Create(apiKey, new ElmahIoOptions
            {
                // Remove comment on the following line to change the default timeout from 5 seconds to something else.
                //Timeout = TimeSpan.FromSeconds(10),
                // Remove comment on the following line to identify your program with a custom user agent.
                //UserAgent = "Elmah.Io.Client.Console/1.0.0.0",
                // Remove comment on the following line to automatically obfuscate form keys by name.
                //FormKeysToObfuscate = new List<string> { "password", "pwd", "adgangskode", "passwort", "contraseña" },
                // Remove comment on the following line to log through a proxy (in this case Fiddler).
                //WebProxy = new WebProxy("localhost", 8888),
            });

            // Examples of severity helper methods
            client.Messages.Fatal(logId, new ApplicationException("A fatal exception"), "Fatal message");
            client.Messages.Error(logId, new ApplicationException("An exception"), "Error message");
            client.Messages.Warning(logId, "A warning");
            client.Messages.Information(logId, "An info message");
            client.Messages.Debug(logId, "A debug message");
            client.Messages.Verbose(logId, "A verbose message");

            // Example of using OnMessage event to decorate all messages before sending to elmah.io
            client.Messages.OnMessage += (sender, eventArgs) =>
            {
                eventArgs.Message.Version = "1.0.0";
            };

            // Example of creating a log message with full control over all properties
            client.Messages.CreateAndNotify(logId, new CreateMessage
            {
                Title = "Hello World",
                Application = "Elmah.Io.Client sample",
                Detail = "This is a long description of the error. Maybe even a stacktrace",
                Severity = Severity.Error.ToString(),
                Data = new List<Item>
                {
                    new() {Key = "Username", Value = "Man in black"}
                },
                Form = new List<Item>
                {
                    new() {Key = "Password", Value = "SecretPassword"},
                    new() {Key = "pwd", Value = "Other secret value"},
                    new() {Key = "visible form item", Value = "With a value"}
                }
            });

            // Example of creating a log message from an exception and enriching it
            var exception = new ApplicationException("An exception");
            exception.Data.Add("Hello", "World");
            var createMessage = exception.ToMessage();
            createMessage.Application = "Elmah.Io.Client sample";
            createMessage.Data.Add(new Item("Generated by", "An exception"));
            client.Messages.CreateAndNotify(logId, createMessage);

            // Example of using the bulk endpoint to store multiple log messages in a single request
            client.Messages.CreateBulkAndNotify(logId, new[]
            {
                new CreateMessage { Title = "This is a bulk message" },
                new CreateMessage { Title = "This is another bulk message" },
            }.ToList());

            // Example of using structured logging
            client.Messages.CreateAndNotify(logId, new CreateMessage
            {
                Title = "Thomas says Hello",
                TitleTemplate = "{User} says Hello",
            });

            // Example of filtering undesired form items
            var options = new ElmahIoOptions();
            options.FormKeysToObfuscate.Add("visible form item");
            var client2 = ElmahioAPI.Create(apiKey, options);

            client2.Messages.CreateAndNotify(logId, new CreateMessage
            {
                Title = "Hello World",
                Form = new List<Item>
                {
                    new() { Key = "Password", Value = "SecretPassword" },
                    new() { Key = "pwd", Value = "Other secret value" },
                    new() { Key = "visible form item", Value = "Now this is obfuscated too" }
                }
            });
        }
    }
}
